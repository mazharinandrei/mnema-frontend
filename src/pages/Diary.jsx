import { useState, useEffect, useRef } from "react"
import api from "../api"
import Entry from "../components/Entry"
import { Heading, Button, Textarea, Group, Box, Container, Center, IconButton, Spinner } from "@chakra-ui/react"
import { ArrowUp } from "../components/Icons"
import Header from "../components/Header"
import DateIsland from "../components/DateIsland"


function Diary() {

    const [entries, setEntries] = useState([]);
    const [content, setContent] = useState("");
    const [entriesMax, setEntriesMax] = useState(0);
    const [nextPage, setNextPage] = useState(`api/diary?page=${1}`);

    const [isLoading, setIsLoading] = useState(false);
    const [hasMore, setHasMore] = useState(true);

    // const limit = 10;

    const entriesContainerRef = useRef(null); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø–∏—Å–µ–π

    const entryRefs = useRef([]); // —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Å—Å–∏–≤ —Ä–µ—Ñ–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏

    const prevTopIdx = useRef(null);

    const [topEntryDate, setTopEntryDate] = useState("—Å–µ–≥–æ–¥–Ω—è"); // –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –≤–µ—Ä—Ö–Ω–µ–π –∑–∞–ø–∏—Å–∏
    //TODO: –Ω–µ —Å–µ–≥–æ–¥–Ω—è, –∞ –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∑–∞–ø–∏—Å–∏

    const [hints, setHints] = useState({ title: "–¥–Ω–µ–≤–Ω–∏–∫", placeholder: "—Ç–µ–∫—Å—Ç –∑–∞–ø–∏—Å–∏..." });

    useEffect(() => { // –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ 
        getEntries();
        getHints();
    }, [])

    useEffect(() => {
        if (entriesContainerRef.current) {
            // –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
            entriesContainerRef.current.scrollTop = entriesContainerRef.current.scrollHeight;
        }
    }, [entries] /*[entries] - –∑–Ω–∞—á–∏—Ç, —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ –ª—é–±–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ entries*/);

    const getHints = () => {
        api
            .get("api/entry-hints")
            .then((res) => setHints(res.data))
            .catch((err) => console.error(err))
    }

    // –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∏–∑ API
    const getEntries = () => {

        api
            .get(nextPage)
            .then((res) => res.data)
            .then((data) => {
                let reversed = data.results.reverse();

                if (data.next) {
                    setHasMore(true);
                    setNextPage(data.next);
                } else setHasMore(false);
                setEntries(prevItems => [...reversed, ...entries]);
                console.log(data);
                setEntriesMax(data.count)
            })
            .catch((err) => console.log(err));
    };

    const deleteEntry = (id) => {
        api
            .delete(`/api/diary/delete/${id}`)
            .then((res) => {
                if (res.status === 204) console.log("–∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞‚ò†");
                else alert("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòæ");
                getEntries(); // TODO: –Ω–µ getEntries, –∞ —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            });
    };

    const createEntry = (e) => {
        e.preventDefault()
        api.post("/api/diary", { content }).then((res) => {
            if (res.status === 201) { console.log("—â—â—è –ø–∞–∂–∂–∏ –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–ø–∏—Å—å"); setContent("") }
            else alert("—á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫üòæ")
            getEntries(); // TODO: –Ω–µ getEntries, –∞ –¥–æ–±–∞–≤–∏—Ç—å entry –≤ array
        }).catch((err) => alert(err))

    }

    const formatForDisplay = (date) => {
        const today = new Date();
        const entryDate = new Date(date);
        const diff = Math.floor((today.getTime() - entryDate.getTime()) / (1000 * 60 * 60 * 24)); // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö

        if (diff === 0) { console.log("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " + entryDate + "; —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: " + diff); return "—Å–µ–≥–æ–¥–Ω—è"; }

        else if (diff === 1) { console.log("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " + entryDate + "; —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: " + diff); return "–≤—á–µ—Ä–∞"; }

        else if (today.getFullYear() === entryDate.getFullYear()) {
            console.log("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " + entryDate + "; —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: " + diff);
            return entryDate.toLocaleDateString("ru-RU", { month: 'long', day: 'numeric' });
        }

        console.log("–î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏: " + entryDate + "; —Ä–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö: " + diff);
        return entryDate.toLocaleDateString("ru-RU", {

            year: 'numeric', month: 'long', day: 'numeric'
        });
    }

    const handleScroll = async () => {
        if (entriesContainerRef.current) {

            if (entriesContainerRef.current.scrollTop < 1) {
                setIsLoading(true);
                if (hasMore)
                    getEntries();
            }
            else
                setIsLoading(false);

            console.log(entriesContainerRef.current.scrollTop,
                entriesContainerRef.current.clientHeight,
                entriesContainerRef.current.scrollHeight)
            updateDate();
        }
    }

    const updateDate = async () => {
        if (!entriesContainerRef.current) return;
        const containerTop = entriesContainerRef.current.getBoundingClientRect().top;
        let minDiff = Infinity;
        let topIdx = 0;
        entryRefs.current.forEach((el, idx) => {
            if (el) {
                const diff = Math.abs(el.getBoundingClientRect().top - containerTop);
                if (diff < minDiff) {
                    minDiff = diff;
                    topIdx = idx;
                }
            }
        });
        if (entries[topIdx] && prevTopIdx.current !== topIdx) {
            prevTopIdx.current = topIdx;
            //console.log("–¢–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å —Å–≤–µ—Ä—Ö—É:", entries[topIdx].created_at);
            setTopEntryDate(
                formatForDisplay(entries[topIdx].created_at)
            );

        }
    };

    return <Container
        maxW="container.md"
        height="100vh"
        display="flex"
        flexDirection="column"
        px={20}
        position="relative"
    >
        <Header title={hints.title} />

        {/* –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º–∞—è –æ–±–ª–∞—Å—Ç—å –∑–∞–ø–∏—Å–µ–π */}
        <Center>
            <Box
                border="1px solid gray"
                borderRadius="xl"
                px={2}
            >{topEntryDate}</Box>
        </Center>
        < Box
            ref={entriesContainerRef}
            onScroll={handleScroll}
            flex="1"
            overflowY="auto"
            width="full"
            mb={4}
            css={{
                '&::-webkit-scrollbar': {
                    width: '4px',
                },
                '&::-webkit-scrollbar-track': {
                    width: '6px',
                },
                '&::-webkit-scrollbar-thumb': {
                    background: '#f0e2e2ff',
                    borderRadius: '24px',
                },
            }}
        >
            {isLoading && hasMore && <Center><Spinner /></Center>}

            {
                entries.map((entry, idx) => (
                    //TODO: –µ—Å–ª–∏ –º–µ–Ω—è–µ—Ç—Å—è –¥–∞—Ç–∞
                    <div ref={el => entryRefs.current[idx] = el} key={entry.id}>
                        <Entry entry={entry} onDelete={deleteEntry} />
                    </div>
                ))
            }
        </Box >

        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ - –ø—Ä–∏–±–∏—Ç–∞ –∫ –Ω–∏–∑—É */}
        < Box
            width="full"
            position="sticky"
            bottom={0}
            pt={2}
            pb={4}
        >
            <form onSubmit={createEntry}>
                <Box
                    position="relative"
                    border="1px solid"
                    borderRadius={20}
                    padding={2}>
                    <Textarea
                        type="text"
                        id="entry"
                        name="entry"
                        placeholder={hints.placeholder}
                        required
                        value={content}
                        onChange={(e) => setContent(e.target.value)}
                        resize="none"
                        pr="50px"
                        autoresize
                        border="none"
                        outline="none"
                        onKeyDown={(e) => {
                            if (e.key === 'Enter' && !e.shiftKey) {
                                e.preventDefault();
                                createEntry(e);
                            }
                        }}
                    />
                    <IconButton
                        position="absolute"
                        right="10px"
                        bottom="10px"
                        size="sm"
                        type="submit"
                        title="–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å"
                        rounded="full"
                    >
                        <ArrowUp />
                    </IconButton>
                </Box>
            </form>
        </Box >
    </Container >
}

export default Diary